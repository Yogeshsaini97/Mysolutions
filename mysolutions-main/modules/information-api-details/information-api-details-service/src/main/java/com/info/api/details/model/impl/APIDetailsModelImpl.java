/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.info.api.details.model.impl;

import com.info.api.details.model.APIDetails;
import com.info.api.details.model.APIDetailsModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the APIDetails service. Represents a row in the &quot;FOO_APIDetails&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>APIDetailsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link APIDetailsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see APIDetailsImpl
 * @generated
 */
@JSON(strict = true)
public class APIDetailsModelImpl
	extends BaseModelImpl<APIDetails> implements APIDetailsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a api details model instance should use the <code>APIDetails</code> interface instead.
	 */
	public static final String TABLE_NAME = "FOO_APIDetails";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"ID", Types.BIGINT},
		{"CreateDate", Types.TIMESTAMP}, {"UserID", Types.BIGINT},
		{"Path", Types.VARCHAR}, {"Method", Types.VARCHAR},
		{"RequestBody", Types.VARCHAR}, {"ResponseCode", Types.INTEGER},
		{"ResponseMessage", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("CreateDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("UserID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("Path", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("Method", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("RequestBody", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ResponseCode", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("ResponseMessage", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table FOO_APIDetails (uuid_ VARCHAR(75) null,ID LONG not null primary key,CreateDate DATE null,UserID LONG,Path VARCHAR(75) null,Method VARCHAR(75) null,RequestBody VARCHAR(75) null,ResponseCode INTEGER,ResponseMessage VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table FOO_APIDetails";

	public static final String ORDER_BY_JPQL = " ORDER BY apiDetails.ID ASC";

	public static final String ORDER_BY_SQL = " ORDER BY FOO_APIDetails.ID ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public APIDetailsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _ID;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return APIDetails.class;
	}

	@Override
	public String getModelClassName() {
		return APIDetails.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<APIDetails, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<APIDetails, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<APIDetails, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((APIDetails)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<APIDetails, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<APIDetails, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(APIDetails)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<APIDetails, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<APIDetails, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<APIDetails, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<APIDetails, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<APIDetails, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<APIDetails, Object>>();
		Map<String, BiConsumer<APIDetails, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<APIDetails, ?>>();

		attributeGetterFunctions.put("uuid", APIDetails::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<APIDetails, String>)APIDetails::setUuid);
		attributeGetterFunctions.put("ID", APIDetails::getID);
		attributeSetterBiConsumers.put(
			"ID", (BiConsumer<APIDetails, Long>)APIDetails::setID);
		attributeGetterFunctions.put("CreateDate", APIDetails::getCreateDate);
		attributeSetterBiConsumers.put(
			"CreateDate",
			(BiConsumer<APIDetails, Date>)APIDetails::setCreateDate);
		attributeGetterFunctions.put("UserID", APIDetails::getUserID);
		attributeSetterBiConsumers.put(
			"UserID", (BiConsumer<APIDetails, Long>)APIDetails::setUserID);
		attributeGetterFunctions.put("Path", APIDetails::getPath);
		attributeSetterBiConsumers.put(
			"Path", (BiConsumer<APIDetails, String>)APIDetails::setPath);
		attributeGetterFunctions.put("Method", APIDetails::getMethod);
		attributeSetterBiConsumers.put(
			"Method", (BiConsumer<APIDetails, String>)APIDetails::setMethod);
		attributeGetterFunctions.put("RequestBody", APIDetails::getRequestBody);
		attributeSetterBiConsumers.put(
			"RequestBody",
			(BiConsumer<APIDetails, String>)APIDetails::setRequestBody);
		attributeGetterFunctions.put(
			"ResponseCode", APIDetails::getResponseCode);
		attributeSetterBiConsumers.put(
			"ResponseCode",
			(BiConsumer<APIDetails, Integer>)APIDetails::setResponseCode);
		attributeGetterFunctions.put(
			"ResponseMessage", APIDetails::getResponseMessage);
		attributeSetterBiConsumers.put(
			"ResponseMessage",
			(BiConsumer<APIDetails, String>)APIDetails::setResponseMessage);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getID() {
		return _ID;
	}

	@Override
	public void setID(long ID) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ID = ID;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _CreateDate;
	}

	@Override
	public void setCreateDate(Date CreateDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_CreateDate = CreateDate;
	}

	@JSON
	@Override
	public long getUserID() {
		return _UserID;
	}

	@Override
	public void setUserID(long UserID) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_UserID = UserID;
	}

	@JSON
	@Override
	public String getPath() {
		if (_Path == null) {
			return "";
		}
		else {
			return _Path;
		}
	}

	@Override
	public void setPath(String Path) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_Path = Path;
	}

	@JSON
	@Override
	public String getMethod() {
		if (_Method == null) {
			return "";
		}
		else {
			return _Method;
		}
	}

	@Override
	public void setMethod(String Method) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_Method = Method;
	}

	@JSON
	@Override
	public String getRequestBody() {
		if (_RequestBody == null) {
			return "";
		}
		else {
			return _RequestBody;
		}
	}

	@Override
	public void setRequestBody(String RequestBody) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_RequestBody = RequestBody;
	}

	@JSON
	@Override
	public int getResponseCode() {
		return _ResponseCode;
	}

	@Override
	public void setResponseCode(int ResponseCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ResponseCode = ResponseCode;
	}

	@JSON
	@Override
	public String getResponseMessage() {
		if (_ResponseMessage == null) {
			return "";
		}
		else {
			return _ResponseMessage;
		}
	}

	@Override
	public void setResponseMessage(String ResponseMessage) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ResponseMessage = ResponseMessage;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, APIDetails.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public APIDetails toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, APIDetails>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		APIDetailsImpl apiDetailsImpl = new APIDetailsImpl();

		apiDetailsImpl.setUuid(getUuid());
		apiDetailsImpl.setID(getID());
		apiDetailsImpl.setCreateDate(getCreateDate());
		apiDetailsImpl.setUserID(getUserID());
		apiDetailsImpl.setPath(getPath());
		apiDetailsImpl.setMethod(getMethod());
		apiDetailsImpl.setRequestBody(getRequestBody());
		apiDetailsImpl.setResponseCode(getResponseCode());
		apiDetailsImpl.setResponseMessage(getResponseMessage());

		apiDetailsImpl.resetOriginalValues();

		return apiDetailsImpl;
	}

	@Override
	public APIDetails cloneWithOriginalValues() {
		APIDetailsImpl apiDetailsImpl = new APIDetailsImpl();

		apiDetailsImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		apiDetailsImpl.setID(this.<Long>getColumnOriginalValue("ID"));
		apiDetailsImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("CreateDate"));
		apiDetailsImpl.setUserID(this.<Long>getColumnOriginalValue("UserID"));
		apiDetailsImpl.setPath(this.<String>getColumnOriginalValue("Path"));
		apiDetailsImpl.setMethod(this.<String>getColumnOriginalValue("Method"));
		apiDetailsImpl.setRequestBody(
			this.<String>getColumnOriginalValue("RequestBody"));
		apiDetailsImpl.setResponseCode(
			this.<Integer>getColumnOriginalValue("ResponseCode"));
		apiDetailsImpl.setResponseMessage(
			this.<String>getColumnOriginalValue("ResponseMessage"));

		return apiDetailsImpl;
	}

	@Override
	public int compareTo(APIDetails apiDetails) {
		long primaryKey = apiDetails.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof APIDetails)) {
			return false;
		}

		APIDetails apiDetails = (APIDetails)object;

		long primaryKey = apiDetails.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<APIDetails> toCacheModel() {
		APIDetailsCacheModel apiDetailsCacheModel = new APIDetailsCacheModel();

		apiDetailsCacheModel.uuid = getUuid();

		String uuid = apiDetailsCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			apiDetailsCacheModel.uuid = null;
		}

		apiDetailsCacheModel.ID = getID();

		Date CreateDate = getCreateDate();

		if (CreateDate != null) {
			apiDetailsCacheModel.CreateDate = CreateDate.getTime();
		}
		else {
			apiDetailsCacheModel.CreateDate = Long.MIN_VALUE;
		}

		apiDetailsCacheModel.UserID = getUserID();

		apiDetailsCacheModel.Path = getPath();

		String Path = apiDetailsCacheModel.Path;

		if ((Path != null) && (Path.length() == 0)) {
			apiDetailsCacheModel.Path = null;
		}

		apiDetailsCacheModel.Method = getMethod();

		String Method = apiDetailsCacheModel.Method;

		if ((Method != null) && (Method.length() == 0)) {
			apiDetailsCacheModel.Method = null;
		}

		apiDetailsCacheModel.RequestBody = getRequestBody();

		String RequestBody = apiDetailsCacheModel.RequestBody;

		if ((RequestBody != null) && (RequestBody.length() == 0)) {
			apiDetailsCacheModel.RequestBody = null;
		}

		apiDetailsCacheModel.ResponseCode = getResponseCode();

		apiDetailsCacheModel.ResponseMessage = getResponseMessage();

		String ResponseMessage = apiDetailsCacheModel.ResponseMessage;

		if ((ResponseMessage != null) && (ResponseMessage.length() == 0)) {
			apiDetailsCacheModel.ResponseMessage = null;
		}

		return apiDetailsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<APIDetails, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<APIDetails, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<APIDetails, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((APIDetails)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, APIDetails>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					APIDetails.class, ModelWrapper.class);

	}

	private String _uuid;

	private long _ID;

	private Date _CreateDate;
	private long _UserID;
	private String _Path;
	private String _Method;
	private String _RequestBody;
	private int _ResponseCode;
	private String _ResponseMessage;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<APIDetails, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((APIDetails)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("ID", _ID);
		_columnOriginalValues.put("CreateDate", _CreateDate);
		_columnOriginalValues.put("UserID", _UserID);
		_columnOriginalValues.put("Path", _Path);
		_columnOriginalValues.put("Method", _Method);
		_columnOriginalValues.put("RequestBody", _RequestBody);
		_columnOriginalValues.put("ResponseCode", _ResponseCode);
		_columnOriginalValues.put("ResponseMessage", _ResponseMessage);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("ID", 2L);

		columnBitmasks.put("CreateDate", 4L);

		columnBitmasks.put("UserID", 8L);

		columnBitmasks.put("Path", 16L);

		columnBitmasks.put("Method", 32L);

		columnBitmasks.put("RequestBody", 64L);

		columnBitmasks.put("ResponseCode", 128L);

		columnBitmasks.put("ResponseMessage", 256L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private APIDetails _escapedModel;

}